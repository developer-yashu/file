 6 Find the Index of the First Occurrence of a Value
o Explanation: Return the index of the first appearance of a specified value.
o Given Array: {10, 20, 30, 40, 50}
o Search Value: 30
o Expected Result: 2


#include <iostream>
using namespace std;
int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int n = sizeof(arr) / sizeof(arr[0]);  
    int searchValue = 30;
    int index = 1;

    for (int i = 0; i < n; i++) {
        if (arr[i] == searchValue) {
            index = i;
            break;   
        }
    }

    if (index != 1) {
        cout << "The index  first occurrence of " << searchValue << " is: " << index << endl;
    } else {
        cout << searchValue << " is not in the array." << endl;
    }

    return 0;
}
---------------------------------------------------------------------------------------------
7. Rotate an Array to the Right by k Steps
o Explanation: Shift all elements to the right by k positions.
o Given Array: {1, 2, 3, 4, 5}
o Rotation (k = 2):
o Expected Array: {4, 5, 1, 2, 3}


#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);   
    int k = 2;   
    
     k = k % n;

     int temp[n];
    
     for (int i = 0; i < k; i++) {
        temp[i] = arr[n - k + i];
    }

     for (int i = k; i < n; i++) {
        temp[i] = arr[i - k];
    }

     for (int i = 0; i < n; i++) {
        arr[i] = temp[i];
    }

     cout << "Rotated Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

---------------------------------------------------------------------------------------------
8. Compute the Average of Elements in an Array
o Explanation: Calculate the average value of all elements in the array.
o Given Array: {1, 2, 3, 4, 5}
o Expected Result: 3.0 (Average of 1, 2, 3, 4, and 5)


#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);   
    int sum = 0;

     for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

     double average = static_cast<double>(sum) / n;

     cout << "The average of elements " << average << endl;

    return 0;
}
---------------------------------------------------------------------------------------------

9. Find the Most Frequent Element in an Array
o Explanation: Determine the element that appears most often in the array.
o Given Array: {1, 3, 2, 1, 4, 1, 5, 2}
o Expected Result: 1


#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 3, 2, 1, 4, 1, 5, 2};
    int n = sizeof(arr) / sizeof(arr[0]);   

    int maxCount = 0;      
    int mostFrequent = 0; 

 
    for (int i = 0; i < n; i++) {
        int count = 0;
        for (int j = 0; j < n; j++) {
            if (arr[i] == arr[j]) {
                count++;
            }
        }
        
         if (count > maxCount) {
            maxCount = count;
            mostFrequent = arr[i];
        }
    }

     cout << "The most   element is: " << mostFrequent << endl;

    return 0;
}

---------------------------------------------------------------------------------------------
10. Find the Median of a Sorted Array
o Explanation: Compute the middle value or average of middle values in a sorted
array.
o Given Array: {1, 3, 3, 6, 7, 8, 9}
o Expected Result: 6


#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 3, 3, 6, 7, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);   
    double median;

     if (n % 2 != 0) {
        median = arr[n / 2];
    }
 
    else {
        median = (arr[(n / 2) - 1] + arr[n / 2]) / 2.0;
    }

     
    cout << "The median is: " << median << endl;

    return 0;
}
---------------------------------------------------------------------------------------------
11

#include <iostream>
using namespace std;

int main() {
    int n = 3; // Size of the 2D array (3x3)
    int arr[3][3] = { {1, 2, 3},
                      {4, 5, 6},
                      {7, 8, 9} };

     cout << "Original Array:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

      for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            swap(arr[i][j], arr[j][i]);
        }
    }

     for (int i = 0; i < n; i++) {
        for (int j = 0; j < n / 2; j++) {
            swap(arr[i][j], arr[i][n - j - 1]);
        }
    }

     cout << "Rotated Array" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}



